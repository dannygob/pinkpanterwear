package com.example.pinkpanterwear.ui.ViewModel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.pinkpanterwear.AuthHelper
import com.example.pinkpanterwear.entities.CartItem
import com.example.pinkpanterwear.entities.OrderItem
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class CheckoutViewModel : ViewModel() {

    // TODO: Use Dependency Injection
    private val orderRepository =
        _root_ide_package_.com.example.pinkpanterwear.repositories.OrderRepository()
    private val cartRepository = _root_ide_package_.com.example.pinkpanterwear.di.CartRepository()
    private val authHelper = AuthHelper()

    private val _shippingAddress = MutableStateFlow<Map<String, String>?>(null)
    val shippingAddress: StateFlow<Map<String, String>?> = _shippingAddress.asStateFlow()

    private val _cartItemsForSummary = MutableStateFlow<List<CartItem>>(emptyList())
    val cartItemsForSummary: StateFlow<List<CartItem>> = _cartItemsForSummary.asStateFlow()

    private val _grandTotal = MutableStateFlow(0.0)
    val grandTotal: StateFlow<Double> = _grandTotal.asStateFlow()

    private val _isLoadingCartSummary = MutableStateFlow(false)
    val isLoadingCartSummary: StateFlow<Boolean> = _isLoadingCartSummary.asStateFlow()

    private val _cartSummaryError = MutableStateFlow<String?>(null)
    val cartSummaryError: StateFlow<String?> = _cartSummaryError.asStateFlow()

    private val _isLoadingOrderPlacement = MutableStateFlow(false)
    val isLoadingOrderPlacement: StateFlow<Boolean> = _isLoadingOrderPlacement.asStateFlow()

    private val _orderPlacementError = MutableStateFlow<String?>(null)
    val orderPlacementError: StateFlow<String?> = _orderPlacementError.asStateFlow()

    private val _orderPlacementSuccess = MutableStateFlow<String?>(null) // Holds Order ID
    val orderPlacementSuccess: StateFlow<String?> = _orderPlacementSuccess.asStateFlow()

    fun setShippingAddress(address: Map<String, String>) {
        _shippingAddress.value = address
    }

    fun loadCartForSummary() {
        val userId = authHelper.getCurrentUser()?.uid
        if (userId.isNullOrEmpty()) {
            _cartSummaryError.value = "User not logged in."
            _cartItemsForSummary.value = emptyList()
            _grandTotal.value = 0.0
            return
        }
        viewModelScope.launch {
            _isLoadingCartSummary.value = true
            _cartSummaryError.value = null
            try {
                val items = cartRepository.getCartItems(userId)
                _cartItemsForSummary.value = items
                _grandTotal.value = items.sumOf { it.product.price * it.quantity }
            } catch (e: Exception) {
                Log.e("CheckoutVM", "Error loading cart for summary", e)
                _cartSummaryError.value = "Failed to load cart: ${e.message}"
                _cartItemsForSummary.value = emptyList()
                _grandTotal.value = 0.0
            } finally {
                _isLoadingCartSummary.value = false
            }
        }
    }

    fun placeOrder() {
        val userId = authHelper.getCurrentUser()?.uid
        val currentUser = authHelper.getCurrentUser() // For name/email

        if (userId.isNullOrEmpty() || currentUser == null) {
            _orderPlacementError.value = "User not logged in. Cannot place order."
            return
        }
        val currentShippingAddress = _shippingAddress.value
        if (currentShippingAddress == null) {
            _orderPlacementError.value = "Shipping address is missing."
            return
        }
        val currentCart = _cartItemsForSummary.value
        if (currentCart.isEmpty()) {
            _orderPlacementError.value = "Cart is empty."
            return
        }

        viewModelScope.launch {
            _isLoadingOrderPlacement.value = true
            _orderPlacementError.value = null
            _orderPlacementSuccess.value = null

            val userName = currentUser.displayName?.takeIf { it.isNotBlank() }
                ?: currentUser.email?.takeIf { it.isNotBlank() }
                ?: "N/A"

            val order = Order(
                // orderId will be auto-generated by Firestore or set by repository's createOrder
                userId = userId,
                userName = userName,
                totalAmount = _grandTotal.value,
                shippingAddress = currentShippingAddress,
                orderStatus = "Pending",
                orderDate = Timestamp.now() // Client-side timestamp, or use @ServerTimestamp in Order.kt
            )

            val orderItems = currentCart.map { cartItem ->
                OrderItem(
                    productId = cartItem.productId,
                    productName = cartItem.productName,
                    quantity = cartItem.quantity,
                    pricePerItem = cartItem.productPrice
                )
            }

            try {
                // Assuming OrderRepository.createOrder will handle generating Order ID if not passed
                val newOrderId = orderRepository.createOrder(order, orderItems)
                if (newOrderId != null) {
                    val cartCleared = cartRepository.clearCart(userId)
                    if (!cartCleared) {
                        Log.w(
                            "CheckoutVM",
                            "Failed to clear cart for user $userId after order $newOrderId"
                        )
                        // Non-critical error, order is placed. Might want to inform user or log for admin.
                    }
                    _orderPlacementSuccess.value = newOrderId
                } else {
                    _orderPlacementError.value = "Failed to create order in repository."
                }
            } catch (e: Exception) {
                Log.e("CheckoutVM", "Exception placing order", e)
                _orderPlacementError.value = "Order placement failed: ${e.message}"
            } finally {
                _isLoadingOrderPlacement.value = false
            }
        }
    }

    fun consumeOrderPlacementStatus() {
        _orderPlacementError.value = null
        _orderPlacementSuccess.value = null
    }

    fun consumeCartSummaryError() {
        _cartSummaryError.value = null
    }
}